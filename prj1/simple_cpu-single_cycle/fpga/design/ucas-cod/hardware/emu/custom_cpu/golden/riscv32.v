/* Generated by Yosys 0.11 (git sha1 360fed8e4, gcc 9.4.0-1ubuntu1~20.04 -fPIC -Os) */

(* src = "custom_cpu_riscv32.v:5.1-57.10" *)
module alu_golden(A, B, ALUop, Overflow, CarryOut, Zero, Result);
  (* src = "custom_cpu_riscv32.v:42.18-42.40" *)
  wire [32:0] _00_;
  (* src = "custom_cpu_riscv32.v:41.16-41.30" *)
  wire [31:0] _01_;
  (* src = "custom_cpu_riscv32.v:41.33-41.47" *)
  wire [31:0] _02_;
  (* src = "custom_cpu_riscv32.v:48.20-48.54" *)
  wire _03_;
  (* src = "custom_cpu_riscv32.v:48.59-48.79" *)
  wire _04_;
  (* src = "custom_cpu_riscv32.v:50.23-50.44" *)
  wire _05_;
  (* src = "custom_cpu_riscv32.v:50.23-50.56" *)
  wire _06_;
  (* src = "custom_cpu_riscv32.v:50.19-50.67" *)
  wire [31:0] _07_;
  (* src = "custom_cpu_riscv32.v:51.30-51.63" *)
  wire _08_;
  (* src = "custom_cpu_riscv32.v:51.26-51.73" *)
  wire [31:0] _09_;
  (* src = "custom_cpu_riscv32.v:52.30-52.51" *)
  wire _10_;
  (* src = "custom_cpu_riscv32.v:52.30-52.63" *)
  wire _11_;
  (* src = "custom_cpu_riscv32.v:52.26-52.74" *)
  wire [31:0] _12_;
  (* src = "custom_cpu_riscv32.v:53.30-53.63" *)
  wire _13_;
  (* src = "custom_cpu_riscv32.v:53.26-53.74" *)
  wire [31:0] _14_;
  (* src = "custom_cpu_riscv32.v:54.31-54.51" *)
  wire _15_;
  (* src = "custom_cpu_riscv32.v:54.26-54.68" *)
  wire [31:0] _16_;
  (* src = "custom_cpu_riscv32.v:55.34-55.53" *)
  wire _17_;
  (* src = "custom_cpu_riscv32.v:55.34-55.62" *)
  wire _18_;
  (* src = "custom_cpu_riscv32.v:41.28-41.30" *)
  wire [31:0] _19_;
  (* src = "custom_cpu_riscv32.v:41.37-41.41" *)
  wire _20_;
  (* src = "custom_cpu_riscv32.v:44.21-44.40" *)
  wire _21_;
  (* src = "custom_cpu_riscv32.v:48.59-48.68" *)
  wire _22_;
  (* src = "custom_cpu_riscv32.v:50.23-50.32" *)
  wire _23_;
  (* src = "custom_cpu_riscv32.v:50.47-50.56" *)
  wire _24_;
  (* src = "custom_cpu_riscv32.v:50.19-51.73" *)
  wire [31:0] _25_;
  (* src = "custom_cpu_riscv32.v:50.18-53.75" *)
  wire [31:0] _26_;
  (* src = "custom_cpu_riscv32.v:52.26-53.74" *)
  wire [31:0] _27_;
  (* src = "custom_cpu_riscv32.v:54.26-55.63" *)
  wire [31:0] _28_;
  (* src = "custom_cpu_riscv32.v:46.17-46.25" *)
  wire _29_;
  (* src = "custom_cpu_riscv32.v:44.23-44.39" *)
  wire _30_;
  (* src = "custom_cpu_riscv32.v:44.44-44.67" *)
  wire _31_;
  (* src = "custom_cpu_riscv32.v:48.32-48.53" *)
  wire _32_;
  (* src = "custom_cpu_riscv32.v:6.19-6.20" *)
  input [31:0] A;
  (* src = "custom_cpu_riscv32.v:8.14-8.19" *)
  input [2:0] ALUop;
  (* src = "custom_cpu_riscv32.v:7.19-7.20" *)
  input [31:0] B;
  (* src = "custom_cpu_riscv32.v:10.9-10.17" *)
  output CarryOut;
  (* src = "custom_cpu_riscv32.v:9.9-9.17" *)
  output Overflow;
  (* src = "custom_cpu_riscv32.v:12.20-12.26" *)
  output [31:0] Result;
  (* src = "custom_cpu_riscv32.v:11.9-11.13" *)
  output Zero;
  (* src = "custom_cpu_riscv32.v:31.18-31.24" *)
  wire [32:0] addres;
  (* src = "custom_cpu_riscv32.v:26.18-26.24" *)
  wire [31:0] andres;
  (* src = "custom_cpu_riscv32.v:33.10-33.13" *)
  wire cin;
  (* src = "custom_cpu_riscv32.v:30.18-30.22" *)
  wire [31:0] comB;
  (* src = "custom_cpu_riscv32.v:29.18-29.24" *)
  wire [31:0] norres;
  (* src = "custom_cpu_riscv32.v:27.18-27.23" *)
  wire [31:0] orres;
  (* src = "custom_cpu_riscv32.v:32.10-32.16" *)
  wire sltres;
  (* src = "custom_cpu_riscv32.v:28.18-28.24" *)
  wire [31:0] xorres;
  assign _00_ = A + (* src = "custom_cpu_riscv32.v:42.18-42.40" *) comB;
  assign addres = _00_ + (* src = "custom_cpu_riscv32.v:42.18-42.46" *) cin;
  assign andres = A & (* src = "custom_cpu_riscv32.v:35.18-35.23" *) B;
  assign _01_ = { cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin, cin } & (* src = "custom_cpu_riscv32.v:41.16-41.30" *) _19_;
  assign _02_ = { _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_ } & (* src = "custom_cpu_riscv32.v:41.33-41.47" *) B;
  assign Overflow = _21_ & (* src = "custom_cpu_riscv32.v:44.21-44.68" *) _31_;
  assign _03_ = ALUop[2] & (* src = "custom_cpu_riscv32.v:48.20-48.54" *) _32_;
  assign _04_ = _22_ & (* src = "custom_cpu_riscv32.v:48.59-48.79" *) CarryOut;
  assign _05_ = _23_ & (* src = "custom_cpu_riscv32.v:50.23-50.44" *) _22_;
  assign _06_ = _05_ & (* src = "custom_cpu_riscv32.v:50.23-50.56" *) _24_;
  assign _07_ = { _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_, _06_ } & (* src = "custom_cpu_riscv32.v:50.19-50.67" *) andres;
  assign _08_ = _05_ & (* src = "custom_cpu_riscv32.v:51.30-51.63" *) ALUop[0];
  assign _09_ = { _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_, _08_ } & (* src = "custom_cpu_riscv32.v:51.26-51.73" *) orres;
  assign _10_ = _23_ & (* src = "custom_cpu_riscv32.v:52.30-52.51" *) ALUop[2];
  assign _11_ = _10_ & (* src = "custom_cpu_riscv32.v:52.30-52.63" *) _24_;
  assign _12_ = { _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_, _11_ } & (* src = "custom_cpu_riscv32.v:52.26-52.74" *) xorres;
  assign _13_ = _10_ & (* src = "custom_cpu_riscv32.v:53.30-53.63" *) ALUop[0];
  assign _14_ = { _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_, _13_ } & (* src = "custom_cpu_riscv32.v:53.26-53.74" *) norres;
  assign _15_ = ALUop[1] & (* src = "custom_cpu_riscv32.v:54.31-54.51" *) _24_;
  assign _16_ = { _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_, _15_ } & (* src = "custom_cpu_riscv32.v:54.26-54.68" *) addres[31:0];
  assign _17_ = ALUop[1] & (* src = "custom_cpu_riscv32.v:55.34-55.53" *) ALUop[0];
  assign _18_ = _17_ & (* src = "custom_cpu_riscv32.v:55.34-55.62" *) sltres;
  assign Zero = ! (* src = "custom_cpu_riscv32.v:46.17-46.25" *) _29_;
  assign norres = ~ (* src = "custom_cpu_riscv32.v:38.18-38.24" *) orres;
  assign _19_ = ~ (* src = "custom_cpu_riscv32.v:41.28-41.30" *) B;
  assign _20_ = ~ (* src = "custom_cpu_riscv32.v:41.37-41.41" *) cin;
  assign _21_ = ~ (* src = "custom_cpu_riscv32.v:44.21-44.40" *) _30_;
  assign _22_ = ~ (* src = "custom_cpu_riscv32.v:48.59-48.68" *) ALUop[2];
  assign _23_ = ~ (* src = "custom_cpu_riscv32.v:50.23-50.32" *) ALUop[1];
  assign _24_ = ~ (* src = "custom_cpu_riscv32.v:50.47-50.56" *) ALUop[0];
  assign orres = A | (* src = "custom_cpu_riscv32.v:36.17-36.22" *) B;
  assign cin = ALUop[2] | (* src = "custom_cpu_riscv32.v:40.15-40.34" *) ALUop[0];
  assign comB = _01_ | (* src = "custom_cpu_riscv32.v:41.16-41.47" *) _02_;
  assign sltres = _03_ | (* src = "custom_cpu_riscv32.v:48.19-48.80" *) _04_;
  assign _25_ = _07_ | (* src = "custom_cpu_riscv32.v:50.19-51.73" *) _09_;
  assign _26_ = _25_ | (* src = "custom_cpu_riscv32.v:50.18-53.75" *) _27_;
  assign Result = _26_ | (* src = "custom_cpu_riscv32.v:50.18-55.64" *) _28_;
  assign _27_ = _12_ | (* src = "custom_cpu_riscv32.v:52.26-53.74" *) _14_;
  assign _28_ = _16_ | (* src = "custom_cpu_riscv32.v:54.26-55.63" *) _18_;
  assign _29_ = | (* src = "custom_cpu_riscv32.v:46.17-46.25" *) Result;
  assign xorres = A ^ (* src = "custom_cpu_riscv32.v:37.18-37.23" *) B;
  assign _30_ = A[31] ^ (* src = "custom_cpu_riscv32.v:44.23-44.39" *) comB[31];
  assign _31_ = addres[32] ^ (* src = "custom_cpu_riscv32.v:44.44-44.67" *) addres[31];
  assign CarryOut = cin ^ (* src = "custom_cpu_riscv32.v:45.21-45.37" *) addres[32];
  assign _32_ = Overflow ^ (* src = "custom_cpu_riscv32.v:48.32-48.53" *) addres[31];
endmodule

(* top =  1  *)
(* src = "custom_cpu_riscv32.v:113.1-448.10" *)
module custom_cpu_golden(rst, clk, PC, Inst_Req_Valid, Inst_Req_Ready, Instruction, Inst_Valid, Inst_Ready, Address, MemWrite, Write_data, Write_strb, MemRead, Mem_Req_Ready, Read_data, Read_data_Valid, Read_data_Ready, cpu_perf_cnt_0, cpu_perf_cnt_1, cpu_perf_cnt_2, cpu_perf_cnt_3
, cpu_perf_cnt_4, cpu_perf_cnt_5, cpu_perf_cnt_6, cpu_perf_cnt_7, cpu_perf_cnt_8, cpu_perf_cnt_9, cpu_perf_cnt_10, cpu_perf_cnt_11, cpu_perf_cnt_12, cpu_perf_cnt_13, cpu_perf_cnt_14, cpu_perf_cnt_15, inst_retire);
  (* src = "custom_cpu_riscv32.v:391.2-396.5" *)
  wire [31:0] _000_;
  (* src = "custom_cpu_riscv32.v:399.2-412.5" *)
  wire [31:0] _001_;
  (* src = "custom_cpu_riscv32.v:369.2-380.5" *)
  wire [31:0] _002_;
  (* src = "custom_cpu_riscv32.v:383.2-388.5" *)
  wire [31:0] _003_;
  (* src = "custom_cpu_riscv32.v:310.2-315.5" *)
  wire [8:0] _004_;
  (* src = "custom_cpu_riscv32.v:318.2-365.12" *)
  wire [8:0] _005_;
  wire [2:0] _006_;
  wire [3:0] _007_;
  (* src = "custom_cpu_riscv32.v:318.2-365.12" *)
  wire [8:0] _008_;
  (* src = "custom_cpu_riscv32.v:318.2-365.12" *)
  wire [8:0] _009_;
  wire [6:0] _010_;
  wire [6:0] _011_;
  wire [5:0] _012_;
  wire [7:0] _013_;
  (* src = "custom_cpu_riscv32.v:374.11-374.27" *)
  wire [31:0] _014_;
  (* src = "custom_cpu_riscv32.v:387.15-387.21" *)
  wire [31:0] _015_;
  (* src = "custom_cpu_riscv32.v:217.21-217.43" *)
  wire _016_;
  (* src = "custom_cpu_riscv32.v:217.48-217.70" *)
  wire _017_;
  (* src = "custom_cpu_riscv32.v:218.21-218.48" *)
  wire _018_;
  (* src = "custom_cpu_riscv32.v:219.20-219.48" *)
  wire _019_;
  (* src = "custom_cpu_riscv32.v:223.21-223.43" *)
  wire _020_;
  (* src = "custom_cpu_riscv32.v:224.20-224.45" *)
  wire _021_;
  (* src = "custom_cpu_riscv32.v:226.31-226.49" *)
  wire _022_;
  (* src = "custom_cpu_riscv32.v:226.52-226.72" *)
  wire _023_;
  (* src = "custom_cpu_riscv32.v:243.30-243.49" *)
  wire _024_;
  (* src = "custom_cpu_riscv32.v:243.27-243.63" *)
  wire [3:0] _025_;
  (* src = "custom_cpu_riscv32.v:244.45-244.64" *)
  wire _026_;
  (* src = "custom_cpu_riscv32.v:244.42-244.78" *)
  wire [3:0] _027_;
  (* src = "custom_cpu_riscv32.v:245.46-245.64" *)
  wire _028_;
  (* src = "custom_cpu_riscv32.v:245.42-245.78" *)
  wire [3:0] _029_;
  (* src = "custom_cpu_riscv32.v:246.29-246.65" *)
  wire [7:0] _030_;
  (* src = "custom_cpu_riscv32.v:247.40-247.69" *)
  wire _031_;
  (* src = "custom_cpu_riscv32.v:247.78-247.95" *)
  wire _032_;
  (* src = "custom_cpu_riscv32.v:247.103-247.120" *)
  wire _033_;
  (* src = "custom_cpu_riscv32.v:247.37-247.123" *)
  wire [7:0] _034_;
  (* src = "custom_cpu_riscv32.v:248.29-248.65" *)
  wire [7:0] _035_;
  (* src = "custom_cpu_riscv32.v:249.40-249.69" *)
  wire _036_;
  (* src = "custom_cpu_riscv32.v:249.37-249.123" *)
  wire [7:0] _037_;
  (* src = "custom_cpu_riscv32.v:250.29-250.64" *)
  wire [7:0] _038_;
  (* src = "custom_cpu_riscv32.v:251.40-251.69" *)
  wire _039_;
  (* src = "custom_cpu_riscv32.v:251.40-251.78" *)
  wire _040_;
  (* src = "custom_cpu_riscv32.v:254.21-254.111" *)
  wire [31:0] _041_;
  (* src = "custom_cpu_riscv32.v:255.8-255.42" *)
  wire [31:0] _042_;
  (* src = "custom_cpu_riscv32.v:256.12-256.28" *)
  wire _043_;
  (* src = "custom_cpu_riscv32.v:256.12-256.38" *)
  wire _044_;
  (* src = "custom_cpu_riscv32.v:256.8-256.50" *)
  wire [31:0] _045_;
  (* src = "custom_cpu_riscv32.v:257.12-257.40" *)
  wire _046_;
  (* src = "custom_cpu_riscv32.v:257.8-257.61" *)
  wire [31:0] _047_;
  (* src = "custom_cpu_riscv32.v:262.24-262.43" *)
  wire _048_;
  (* src = "custom_cpu_riscv32.v:262.20-262.59" *)
  wire [31:0] _049_;
  (* src = "custom_cpu_riscv32.v:263.11-263.28" *)
  wire _050_;
  (* src = "custom_cpu_riscv32.v:263.7-263.42" *)
  wire [31:0] _051_;
  (* src = "custom_cpu_riscv32.v:264.20-264.46" *)
  wire [31:0] _052_;
  (* src = "custom_cpu_riscv32.v:265.7-265.33" *)
  wire [31:0] _053_;
  (* src = "custom_cpu_riscv32.v:266.7-266.60" *)
  wire [31:0] _054_;
  (* src = "custom_cpu_riscv32.v:267.7-267.33" *)
  wire [31:0] _055_;
  (* src = "custom_cpu_riscv32.v:268.7-268.40" *)
  wire [31:0] _056_;
  (* src = "custom_cpu_riscv32.v:269.21-269.36" *)
  wire _057_;
  (* src = "custom_cpu_riscv32.v:269.21-269.46" *)
  wire _058_;
  (* src = "custom_cpu_riscv32.v:269.18-269.56" *)
  wire [2:0] _059_;
  (* src = "custom_cpu_riscv32.v:270.8-270.24" *)
  wire _060_;
  (* src = "custom_cpu_riscv32.v:270.8-270.35" *)
  wire _061_;
  (* src = "custom_cpu_riscv32.v:270.41-270.62" *)
  wire _062_;
  (* src = "custom_cpu_riscv32.v:270.5-270.70" *)
  wire [2:0] _063_;
  (* src = "custom_cpu_riscv32.v:271.5-271.41" *)
  wire [2:0] _064_;
  (* src = "custom_cpu_riscv32.v:271.8-271.30" *)
  wire _065_;
  (* src = "custom_cpu_riscv32.v:272.8-272.49" *)
  wire _066_;
  (* src = "custom_cpu_riscv32.v:272.5-272.58" *)
  wire [2:0] _067_;
  (* src = "custom_cpu_riscv32.v:273.8-273.25" *)
  wire _068_;
  (* src = "custom_cpu_riscv32.v:273.8-273.36" *)
  wire _069_;
  (* src = "custom_cpu_riscv32.v:273.5-273.47" *)
  wire [2:0] _070_;
  (* src = "custom_cpu_riscv32.v:274.8-274.24" *)
  wire _071_;
  (* src = "custom_cpu_riscv32.v:274.8-274.35" *)
  wire _072_;
  (* src = "custom_cpu_riscv32.v:274.5-274.46" *)
  wire [2:0] _073_;
  (* src = "custom_cpu_riscv32.v:275.8-275.34" *)
  wire _074_;
  (* src = "custom_cpu_riscv32.v:275.5-275.45" *)
  wire [2:0] _075_;
  (* src = "custom_cpu_riscv32.v:276.8-276.24" *)
  wire _076_;
  (* src = "custom_cpu_riscv32.v:276.5-276.35" *)
  wire [2:0] _077_;
  (* src = "custom_cpu_riscv32.v:279.20-279.49" *)
  wire [31:0] _078_;
  (* src = "custom_cpu_riscv32.v:279.52-279.76" *)
  wire [31:0] _079_;
  (* src = "custom_cpu_riscv32.v:288.33-288.51" *)
  wire _080_;
  (* src = "custom_cpu_riscv32.v:288.29-288.70" *)
  wire [7:0] _081_;
  (* src = "custom_cpu_riscv32.v:289.13-289.31" *)
  wire _082_;
  (* src = "custom_cpu_riscv32.v:289.9-289.51" *)
  wire [7:0] _083_;
  (* src = "custom_cpu_riscv32.v:290.12-290.31" *)
  wire _084_;
  (* src = "custom_cpu_riscv32.v:290.9-290.52" *)
  wire [7:0] _085_;
  (* src = "custom_cpu_riscv32.v:291.29-291.70" *)
  wire [7:0] _086_;
  (* src = "custom_cpu_riscv32.v:292.9-292.52" *)
  wire [7:0] _087_;
  (* src = "custom_cpu_riscv32.v:293.32-293.51" *)
  wire _088_;
  (* src = "custom_cpu_riscv32.v:293.29-293.70" *)
  wire [7:0] _089_;
  (* src = "custom_cpu_riscv32.v:294.9-294.51" *)
  wire [7:0] _090_;
  (* src = "custom_cpu_riscv32.v:297.34-297.52" *)
  wire _091_;
  (* src = "custom_cpu_riscv32.v:299.21-299.39" *)
  wire _092_;
  (* src = "custom_cpu_riscv32.v:373.7-373.22" *)
  wire _093_;
  (* src = "custom_cpu_riscv32.v:394.11-394.43" *)
  wire _094_;
  (* src = "custom_cpu_riscv32.v:402.11-402.49" *)
  wire _095_;
  wire _096_;
  (* src = "custom_cpu_riscv32.v:271.16-271.30" *)
  wire _097_;
  (* src = "custom_cpu_riscv32.v:272.17-272.31" *)
  wire _098_;
  (* src = "custom_cpu_riscv32.v:272.34-272.48" *)
  wire _099_;
  (* src = "custom_cpu_riscv32.v:304.28-304.48" *)
  wire _100_;
  (* src = "custom_cpu_riscv32.v:304.51-304.70" *)
  wire _101_;
  (* src = "custom_cpu_riscv32.v:305.51-305.71" *)
  wire _102_;
  (* src = "custom_cpu_riscv32.v:372.11-372.30" *)
  wire _103_;
  (* src = "custom_cpu_riscv32.v:386.11-386.30" *)
  wire _104_;
  (* src = "custom_cpu_riscv32.v:403.7-403.19" *)
  wire _105_;
  (* src = "custom_cpu_riscv32.v:405.12-405.24" *)
  wire _106_;
  (* src = "custom_cpu_riscv32.v:407.12-407.25" *)
  wire _107_;
  (* src = "custom_cpu_riscv32.v:409.12-409.25" *)
  wire _108_;
  (* src = "custom_cpu_riscv32.v:219.35-219.48" *)
  wire _109_;
  (* src = "custom_cpu_riscv32.v:222.35-222.48" *)
  wire _110_;
  (* src = "custom_cpu_riscv32.v:224.48-224.61" *)
  wire _111_;
  (* src = "custom_cpu_riscv32.v:217.21-217.31" *)
  wire _112_;
  (* src = "custom_cpu_riscv32.v:217.48-217.58" *)
  wire _113_;
  (* src = "custom_cpu_riscv32.v:218.51-218.61" *)
  wire _114_;
  (* src = "custom_cpu_riscv32.v:220.20-220.50" *)
  wire _115_;
  (* src = "custom_cpu_riscv32.v:226.31-226.39" *)
  wire _116_;
  (* src = "custom_cpu_riscv32.v:243.30-243.38" *)
  wire _117_;
  (* src = "custom_cpu_riscv32.v:243.41-243.49" *)
  wire _118_;
  (* src = "custom_cpu_riscv32.v:247.40-247.58" *)
  wire _119_;
  (* src = "custom_cpu_riscv32.v:249.40-249.58" *)
  wire _120_;
  (* src = "custom_cpu_riscv32.v:251.40-251.58" *)
  wire _121_;
  (* src = "custom_cpu_riscv32.v:262.33-262.43" *)
  wire _122_;
  (* src = "custom_cpu_riscv32.v:263.11-263.18" *)
  wire _123_;
  (* src = "custom_cpu_riscv32.v:263.21-263.28" *)
  wire _124_;
  (* src = "custom_cpu_riscv32.v:269.51-269.56" *)
  wire [2:0] _125_;
  (* src = "custom_cpu_riscv32.v:276.8-276.14" *)
  wire _126_;
  (* src = "custom_cpu_riscv32.v:276.17-276.24" *)
  wire _127_;
  (* src = "custom_cpu_riscv32.v:289.23-289.31" *)
  wire _128_;
  (* src = "custom_cpu_riscv32.v:290.12-290.20" *)
  wire _129_;
  (* src = "custom_cpu_riscv32.v:220.22-220.49" *)
  wire _130_;
  (* src = "custom_cpu_riscv32.v:226.31-226.72" *)
  wire _131_;
  (* src = "custom_cpu_riscv32.v:243.27-244.78" *)
  wire [3:0] _132_;
  (* src = "custom_cpu_riscv32.v:247.75-247.122" *)
  wire [7:0] _133_;
  (* src = "custom_cpu_riscv32.v:254.21-255.42" *)
  wire [31:0] _134_;
  (* src = "custom_cpu_riscv32.v:254.21-256.50" *)
  wire [31:0] _135_;
  (* src = "custom_cpu_riscv32.v:255.12-255.30" *)
  wire _136_;
  (* src = "custom_cpu_riscv32.v:257.21-257.39" *)
  wire _137_;
  (* src = "custom_cpu_riscv32.v:257.12-257.49" *)
  wire _138_;
  (* src = "custom_cpu_riscv32.v:262.24-262.52" *)
  wire _139_;
  (* src = "custom_cpu_riscv32.v:264.20-265.33" *)
  wire [31:0] _140_;
  (* src = "custom_cpu_riscv32.v:264.20-266.60" *)
  wire [31:0] _141_;
  (* src = "custom_cpu_riscv32.v:264.20-267.33" *)
  wire [31:0] _142_;
  (* src = "custom_cpu_riscv32.v:266.11-266.32" *)
  wire _143_;
  (* src = "custom_cpu_riscv32.v:266.11-266.44" *)
  wire _144_;
  (* src = "custom_cpu_riscv32.v:268.11-268.26" *)
  wire _145_;
  (* src = "custom_cpu_riscv32.v:269.18-271.41" *)
  wire [2:0] _146_;
  (* src = "custom_cpu_riscv32.v:269.18-272.58" *)
  wire [2:0] _147_;
  (* src = "custom_cpu_riscv32.v:269.18-273.47" *)
  wire [2:0] _148_;
  (* src = "custom_cpu_riscv32.v:269.18-274.46" *)
  wire [2:0] _149_;
  (* src = "custom_cpu_riscv32.v:269.18-275.45" *)
  wire [2:0] _150_;
  (* src = "custom_cpu_riscv32.v:269.18-270.70" *)
  wire [2:0] _151_;
  (* src = "custom_cpu_riscv32.v:272.17-272.48" *)
  wire _152_;
  (* src = "custom_cpu_riscv32.v:288.29-289.51" *)
  wire [7:0] _153_;
  (* src = "custom_cpu_riscv32.v:297.24-297.52" *)
  wire _154_;
  (* src = "custom_cpu_riscv32.v:299.11-299.39" *)
  wire _155_;
  (* src = "custom_cpu_riscv32.v:337.13-337.28" *)
  wire _156_;
  (* src = "custom_cpu_riscv32.v:337.13-337.37" *)
  wire _157_;
  (* src = "custom_cpu_riscv32.v:337.13-337.49" *)
  wire _158_;
  (* src = "custom_cpu_riscv32.v:337.13-337.61" *)
  wire _159_;
  wire [31:0] _160_;
  wire [31:0] _161_;
  wire [31:0] _162_;
  wire [31:0] _163_;
  wire [31:0] _164_;
  wire [31:0] _165_;
  wire [31:0] _166_;
  wire [31:0] _167_;
  wire [31:0] _168_;
  wire [31:0] _169_;
  (* src = "custom_cpu_riscv32.v:218.21-218.33" *)
  wire _170_;
  (* src = "custom_cpu_riscv32.v:218.36-218.48" *)
  wire _171_;
  (* src = "custom_cpu_riscv32.v:224.33-224.45" *)
  wire _172_;
  (* src = "custom_cpu_riscv32.v:219.35-219.48" *)
  wire _173_;
  (* src = "custom_cpu_riscv32.v:220.22-220.34" *)
  wire _174_;
  (* src = "custom_cpu_riscv32.v:220.37-220.49" *)
  wire _175_;
  (* src = "custom_cpu_riscv32.v:221.20-221.33" *)
  wire _176_;
  (* src = "custom_cpu_riscv32.v:222.35-222.48" *)
  wire _177_;
  (* src = "custom_cpu_riscv32.v:192.8-192.19" *)
  (* unused_bits = "0" *)
  wire ALUcarryout;
  (* src = "custom_cpu_riscv32.v:194.14-194.21" *)
  wire [31:0] ALUdest;
  (* src = "custom_cpu_riscv32.v:190.13-190.18" *)
  wire [2:0] ALUop;
  (* src = "custom_cpu_riscv32.v:191.8-191.19" *)
  (* unused_bits = "0" *)
  wire ALUoverflow;
  (* src = "custom_cpu_riscv32.v:188.14-188.21" *)
  wire [31:0] ALUsrc1;
  (* src = "custom_cpu_riscv32.v:189.14-189.21" *)
  wire [31:0] ALUsrc2;
  (* src = "custom_cpu_riscv32.v:193.8-193.15" *)
  wire ALUzero;
  (* src = "custom_cpu_riscv32.v:128.18-128.25" *)
  output [31:0] Address;
  (* src = "custom_cpu_riscv32.v:227.8-227.13" *)
  wire Al_lo;
  (* src = "custom_cpu_riscv32.v:212.14-212.25" *)
  wire [31:0] B_immediate;
  (* src = "custom_cpu_riscv32.v:222.8-222.14" *)
  wire B_type;
  (* src = "custom_cpu_riscv32.v:226.8-226.14" *)
  wire Branch;
  (* src = "custom_cpu_riscv32.v:176.13-176.15" *)
  reg [31:0] IR;
  (* src = "custom_cpu_riscv32.v:210.14-210.25" *)
  wire [31:0] I_immediate;
  (* src = "custom_cpu_riscv32.v:220.8-220.17" *)
  wire I_type_Al;
  (* src = "custom_cpu_riscv32.v:219.8-219.17" *)
  wire I_type_Jp;
  (* src = "custom_cpu_riscv32.v:221.8-221.17" *)
  wire I_type_Ld;
  (* src = "custom_cpu_riscv32.v:125.10-125.20" *)
  output Inst_Ready;
  (* src = "custom_cpu_riscv32.v:120.9-120.23" *)
  input Inst_Req_Ready;
  (* src = "custom_cpu_riscv32.v:119.10-119.24" *)
  output Inst_Req_Valid;
  (* src = "custom_cpu_riscv32.v:124.9-124.19" *)
  input Inst_Valid;
  (* src = "custom_cpu_riscv32.v:123.18-123.29" *)
  input [31:0] Instruction;
  (* src = "custom_cpu_riscv32.v:214.14-214.25" *)
  wire [31:0] J_immediate;
  (* src = "custom_cpu_riscv32.v:218.8-218.14" *)
  wire J_type;
  (* src = "custom_cpu_riscv32.v:177.13-177.16" *)
  reg [31:0] MDR;
  (* src = "custom_cpu_riscv32.v:132.10-132.17" *)
  output MemRead;
  (* src = "custom_cpu_riscv32.v:129.10-129.18" *)
  output MemWrite;
  (* src = "custom_cpu_riscv32.v:133.9-133.22" *)
  input Mem_Req_Ready;
  (* src = "custom_cpu_riscv32.v:238.14-238.30" *)
  wire [7:0] Mem_Write_Byte_0;
  (* src = "custom_cpu_riscv32.v:237.14-237.30" *)
  wire [7:0] Mem_Write_Byte_1;
  (* src = "custom_cpu_riscv32.v:236.14-236.30" *)
  wire [7:0] Mem_Write_Byte_2;
  (* src = "custom_cpu_riscv32.v:235.14-235.30" *)
  wire [7:0] Mem_Write_Byte_3;
  (* src = "custom_cpu_riscv32.v:118.20-118.22" *)
  output [31:0] PC;
  reg [31:0] PC;
  (* src = "custom_cpu_riscv32.v:178.18-178.25" *)
  reg [31:0] PC_next;
  (* src = "custom_cpu_riscv32.v:184.14-184.23" *)
  wire [31:0] RF_rdata1;
  (* src = "custom_cpu_riscv32.v:185.14-185.23" *)
  wire [31:0] RF_rdata2;
  (* src = "custom_cpu_riscv32.v:182.13-182.21" *)
  wire [4:0] RF_waddr;
  (* src = "custom_cpu_riscv32.v:183.14-183.22" *)
  wire [31:0] RF_wdata;
  (* src = "custom_cpu_riscv32.v:181.8-181.14" *)
  wire RF_wen;
  (* src = "custom_cpu_riscv32.v:224.8-224.14" *)
  wire R_type;
  (* src = "custom_cpu_riscv32.v:136.18-136.27" *)
  input [31:0] Read_data;
  (* src = "custom_cpu_riscv32.v:138.10-138.25" *)
  output Read_data_Ready;
  (* src = "custom_cpu_riscv32.v:137.9-137.24" *)
  input Read_data_Valid;
  (* src = "custom_cpu_riscv32.v:233.14-233.30" *)
  wire [7:0] Reg_Write_Byte_0;
  (* src = "custom_cpu_riscv32.v:232.14-232.30" *)
  wire [7:0] Reg_Write_Byte_1;
  (* src = "custom_cpu_riscv32.v:231.14-231.30" *)
  wire [7:0] Reg_Write_Byte_2;
  (* src = "custom_cpu_riscv32.v:230.14-230.30" *)
  wire [7:0] Reg_Write_Byte_3;
  (* src = "custom_cpu_riscv32.v:200.14-200.21" *)
  wire [31:0] SHTdest;
  (* src = "custom_cpu_riscv32.v:199.13-199.18" *)
  wire [1:0] SHTop;
  (* src = "custom_cpu_riscv32.v:197.14-197.21" *)
  wire [31:0] SHTsrc1;
  (* src = "custom_cpu_riscv32.v:198.14-198.21" *)
  wire [31:0] SHTsrc2;
  (* src = "custom_cpu_riscv32.v:211.14-211.25" *)
  wire [31:0] S_immediate;
  (* src = "custom_cpu_riscv32.v:223.8-223.14" *)
  wire S_type;
  (* src = "custom_cpu_riscv32.v:213.14-213.25" *)
  wire [31:0] U_immediate;
  (* src = "custom_cpu_riscv32.v:217.8-217.14" *)
  wire U_type;
  (* src = "custom_cpu_riscv32.v:130.18-130.28" *)
  output [31:0] Write_data;
  (* src = "custom_cpu_riscv32.v:131.18-131.28" *)
  output [3:0] Write_strb;
  (* src = "custom_cpu_riscv32.v:115.9-115.12" *)
  input clk;
  (* src = "custom_cpu_riscv32.v:140.16-140.30" *)
  output [31:0] cpu_perf_cnt_0;
  (* src = "custom_cpu_riscv32.v:141.16-141.30" *)
  output [31:0] cpu_perf_cnt_1;
  (* src = "custom_cpu_riscv32.v:150.16-150.31" *)
  output [31:0] cpu_perf_cnt_10;
  (* src = "custom_cpu_riscv32.v:151.16-151.31" *)
  output [31:0] cpu_perf_cnt_11;
  (* src = "custom_cpu_riscv32.v:152.16-152.31" *)
  output [31:0] cpu_perf_cnt_12;
  (* src = "custom_cpu_riscv32.v:153.16-153.31" *)
  output [31:0] cpu_perf_cnt_13;
  (* src = "custom_cpu_riscv32.v:154.16-154.31" *)
  output [31:0] cpu_perf_cnt_14;
  (* src = "custom_cpu_riscv32.v:155.16-155.31" *)
  output [31:0] cpu_perf_cnt_15;
  (* src = "custom_cpu_riscv32.v:142.16-142.30" *)
  output [31:0] cpu_perf_cnt_2;
  (* src = "custom_cpu_riscv32.v:143.16-143.30" *)
  output [31:0] cpu_perf_cnt_3;
  (* src = "custom_cpu_riscv32.v:144.16-144.30" *)
  output [31:0] cpu_perf_cnt_4;
  (* src = "custom_cpu_riscv32.v:145.16-145.30" *)
  output [31:0] cpu_perf_cnt_5;
  (* src = "custom_cpu_riscv32.v:146.16-146.30" *)
  output [31:0] cpu_perf_cnt_6;
  (* src = "custom_cpu_riscv32.v:147.16-147.30" *)
  output [31:0] cpu_perf_cnt_7;
  (* src = "custom_cpu_riscv32.v:148.16-148.30" *)
  output [31:0] cpu_perf_cnt_8;
  (* src = "custom_cpu_riscv32.v:149.16-149.30" *)
  output [31:0] cpu_perf_cnt_9;
  (* src = "custom_cpu_riscv32.v:174.12-174.25" *)
  reg [8:0] current_state;
  (* src = "custom_cpu_riscv32.v:207.13-207.17" *)
  wire [2:0] func;
  (* src = "custom_cpu_riscv32.v:229.13-229.17" *)
  wire [1:0] mask;
  (* src = "custom_cpu_riscv32.v:234.14-234.28" *)
  (* unused_bits = "0" *)
  wire [3:0] mtr_write_strb;
  (* src = "custom_cpu_riscv32.v:175.12-175.22" *)
  wire [8:0] next_state;
  (* src = "custom_cpu_riscv32.v:205.13-205.19" *)
  wire [7:0] opcode;
  (* src = "custom_cpu_riscv32.v:206.13-206.15" *)
  wire [4:0] rd;
  (* src = "custom_cpu_riscv32.v:208.13-208.16" *)
  wire [4:0] rs1;
  (* src = "custom_cpu_riscv32.v:209.13-209.16" *)
  wire [4:0] rs2;
  (* src = "custom_cpu_riscv32.v:114.9-114.12" *)
  input rst;
  output [69:0] inst_retire;
  assign _014_ = PC + (* src = "custom_cpu_riscv32.v:374.11-374.27" *) { IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[7], IR[30:25], IR[11:8], 1'h0 };
  assign _015_ = PC + (* src = "custom_cpu_riscv32.v:387.15-387.21" *) 3'h4;
  assign _016_ = _112_ & (* src = "custom_cpu_riscv32.v:217.21-217.43" *) IR[4];
  assign _017_ = _113_ & (* src = "custom_cpu_riscv32.v:217.48-217.70" *) IR[2];
  assign U_type = _016_ & (* src = "custom_cpu_riscv32.v:217.20-217.71" *) _017_;
  assign _018_ = _170_ & (* src = "custom_cpu_riscv32.v:218.21-218.48" *) _171_;
  assign J_type = _018_ & (* src = "custom_cpu_riscv32.v:218.21-218.61" *) _114_;
  assign _019_ = _170_ & (* src = "custom_cpu_riscv32.v:219.20-219.48" *) _109_;
  assign I_type_Jp = _019_ & (* src = "custom_cpu_riscv32.v:219.20-219.60" *) IR[2];
  assign I_type_Al = _115_ & (* src = "custom_cpu_riscv32.v:220.20-220.62" *) IR[4];
  assign B_type = _170_ & (* src = "custom_cpu_riscv32.v:222.20-222.48" *) _110_;
  assign _020_ = _112_ & (* src = "custom_cpu_riscv32.v:223.21-223.43" *) IR[5];
  assign S_type = _020_ & (* src = "custom_cpu_riscv32.v:223.20-223.60" *) _110_;
  assign _021_ = _112_ & (* src = "custom_cpu_riscv32.v:224.20-224.45" *) _172_;
  assign R_type = _021_ & (* src = "custom_cpu_riscv32.v:224.20-224.61" *) _111_;
  assign _022_ = _116_ & (* src = "custom_cpu_riscv32.v:226.31-226.49" *) ALUzero;
  assign _023_ = IR[14] & (* src = "custom_cpu_riscv32.v:226.52-226.72" *) ALUdest[0];
  assign _024_ = _117_ & (* src = "custom_cpu_riscv32.v:243.30-243.49" *) _118_;
  assign _025_ = { _024_, _024_, _024_, _024_ } & (* src = "custom_cpu_riscv32.v:243.27-243.63" *) 1'h1;
  assign _026_ = _117_ & (* src = "custom_cpu_riscv32.v:244.45-244.64" *) IR[12];
  assign _027_ = { _026_, _026_, _026_, _026_ } & (* src = "custom_cpu_riscv32.v:244.42-244.78" *) 2'h3;
  assign _028_ = IR[13] & (* src = "custom_cpu_riscv32.v:245.46-245.64" *) _118_;
  assign _029_ = { _028_, _028_, _028_, _028_ } & (* src = "custom_cpu_riscv32.v:245.42-245.78" *) 4'hf;
  assign _030_ = { mtr_write_strb[3], mtr_write_strb[3], mtr_write_strb[3], mtr_write_strb[3], mtr_write_strb[3], mtr_write_strb[3], mtr_write_strb[3], mtr_write_strb[3] } & (* src = "custom_cpu_riscv32.v:246.29-246.65" *) MDR[31:24];
  assign _031_ = _119_ & (* src = "custom_cpu_riscv32.v:247.40-247.69" *) _116_;
  assign _032_ = MDR[7] & (* src = "custom_cpu_riscv32.v:247.78-247.95" *) _118_;
  assign _033_ = MDR[15] & (* src = "custom_cpu_riscv32.v:247.103-247.120" *) IR[12];
  assign _034_ = { _031_, _031_, _031_, _031_, _031_, _031_, _031_, _031_ } & (* src = "custom_cpu_riscv32.v:247.37-247.123" *) _133_;
  assign _035_ = { mtr_write_strb[2], mtr_write_strb[2], mtr_write_strb[2], mtr_write_strb[2], mtr_write_strb[2], mtr_write_strb[2], mtr_write_strb[2], mtr_write_strb[2] } & (* src = "custom_cpu_riscv32.v:248.29-248.65" *) MDR[23:16];
  assign _036_ = _120_ & (* src = "custom_cpu_riscv32.v:249.40-249.69" *) _116_;
  assign _037_ = { _036_, _036_, _036_, _036_, _036_, _036_, _036_, _036_ } & (* src = "custom_cpu_riscv32.v:249.37-249.123" *) _133_;
  assign _038_ = { mtr_write_strb[1], mtr_write_strb[1], mtr_write_strb[1], mtr_write_strb[1], mtr_write_strb[1], mtr_write_strb[1], mtr_write_strb[1], mtr_write_strb[1] } & (* src = "custom_cpu_riscv32.v:250.29-250.64" *) MDR[15:8];
  assign _039_ = _121_ & (* src = "custom_cpu_riscv32.v:251.40-251.69" *) _116_;
  assign _040_ = _039_ & (* src = "custom_cpu_riscv32.v:251.40-251.78" *) MDR[7];
  assign _041_ = { I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld, I_type_Ld } & (* src = "custom_cpu_riscv32.v:254.21-254.111" *) { Reg_Write_Byte_3, Reg_Write_Byte_2, Reg_Write_Byte_1, MDR[7:0] };
  assign _042_ = { _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_, _136_ } & (* src = "custom_cpu_riscv32.v:255.8-255.42" *) PC_next;
  assign _043_ = Al_lo & (* src = "custom_cpu_riscv32.v:256.12-256.28" *) _117_;
  assign _044_ = _043_ & (* src = "custom_cpu_riscv32.v:256.12-256.38" *) IR[12];
  assign _045_ = { _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_, _044_ } & (* src = "custom_cpu_riscv32.v:256.8-256.50" *) SHTdest;
  assign _046_ = Al_lo & (* src = "custom_cpu_riscv32.v:257.12-257.40" *) _137_;
  assign _047_ = { _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_, _138_ } & (* src = "custom_cpu_riscv32.v:257.8-257.61" *) ALUdest;
  assign _048_ = U_type & (* src = "custom_cpu_riscv32.v:262.24-262.43" *) _122_;
  assign _049_ = { _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_, _139_ } & (* src = "custom_cpu_riscv32.v:262.20-262.59" *) PC;
  assign _050_ = _123_ & (* src = "custom_cpu_riscv32.v:263.11-263.28" *) _124_;
  assign _051_ = { _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_, _050_ } & (* src = "custom_cpu_riscv32.v:263.7-263.42" *) RF_rdata1;
  assign _052_ = { U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type, U_type } & (* src = "custom_cpu_riscv32.v:264.20-264.46" *) { IR[31:12], 12'h000 };
  assign _053_ = { J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type, J_type } & (* src = "custom_cpu_riscv32.v:265.7-265.33" *) { IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[19:12], IR[20], IR[30:21], 1'h0 };
  assign _054_ = { _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_, _144_ } & (* src = "custom_cpu_riscv32.v:266.7-266.60" *) { IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31:20] };
  assign _055_ = { S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type, S_type } & (* src = "custom_cpu_riscv32.v:267.7-267.33" *) { IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31:25], IR[11:7] };
  assign _056_ = { _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_, _145_ } & (* src = "custom_cpu_riscv32.v:268.7-268.40" *) RF_rdata2;
  assign _057_ = Al_lo & (* src = "custom_cpu_riscv32.v:269.21-269.36" *) IR[14];
  assign _058_ = _057_ & (* src = "custom_cpu_riscv32.v:269.21-269.46" *) IR[13];
  assign _059_ = { _058_, _058_, _058_ } & (* src = "custom_cpu_riscv32.v:269.18-269.56" *) _125_;
  assign _060_ = Al_lo & (* src = "custom_cpu_riscv32.v:270.8-270.24" *) _116_;
  assign _061_ = _060_ & (* src = "custom_cpu_riscv32.v:270.8-270.35" *) _117_;
  assign _062_ = IR[5] & (* src = "custom_cpu_riscv32.v:270.41-270.62" *) IR[30];
  assign _063_ = { _061_, _061_, _061_ } & (* src = "custom_cpu_riscv32.v:270.5-270.70" *) { _062_, 2'h2 };
  assign _064_ = { _065_, _065_, _065_ } & (* src = "custom_cpu_riscv32.v:271.5-271.41" *) 3'h7;
  assign _065_ = Al_lo & (* src = "custom_cpu_riscv32.v:271.8-271.30" *) _097_;
  assign _066_ = Al_lo & (* src = "custom_cpu_riscv32.v:272.8-272.49" *) _152_;
  assign _067_ = { _066_, _066_, _066_ } & (* src = "custom_cpu_riscv32.v:272.5-272.58" *) IR[14:12];
  assign _068_ = B_type & (* src = "custom_cpu_riscv32.v:273.8-273.25" *) _116_;
  assign _069_ = _068_ & (* src = "custom_cpu_riscv32.v:273.8-273.36" *) _117_;
  assign _070_ = { _069_, _069_, _069_ } & (* src = "custom_cpu_riscv32.v:273.5-273.47" *) 3'h6;
  assign _071_ = B_type & (* src = "custom_cpu_riscv32.v:274.8-274.24" *) IR[14];
  assign _072_ = _071_ & (* src = "custom_cpu_riscv32.v:274.8-274.35" *) _117_;
  assign _073_ = { _072_, _072_, _072_ } & (* src = "custom_cpu_riscv32.v:274.5-274.46" *) 3'h7;
  assign _074_ = _071_ & (* src = "custom_cpu_riscv32.v:275.8-275.34" *) IR[13];
  assign _075_ = { _074_, _074_, _074_ } & (* src = "custom_cpu_riscv32.v:275.5-275.45" *) 2'h3;
  assign _076_ = _126_ & (* src = "custom_cpu_riscv32.v:276.8-276.24" *) _127_;
  assign _077_ = { _076_, _076_, _076_ } & (* src = "custom_cpu_riscv32.v:276.5-276.35" *) 2'h2;
  assign _078_ = { I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al, I_type_Al } & (* src = "custom_cpu_riscv32.v:279.20-279.49" *) { IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31:20] };
  assign _079_ = { R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type, R_type } & (* src = "custom_cpu_riscv32.v:279.52-279.76" *) RF_rdata2;
  assign _080_ = ALUdest[1] & (* src = "custom_cpu_riscv32.v:288.33-288.51" *) ALUdest[0];
  assign _081_ = { _080_, _080_, _080_, _080_, _080_, _080_, _080_, _080_ } & (* src = "custom_cpu_riscv32.v:288.29-288.70" *) RF_rdata2[7:0];
  assign _082_ = ALUdest[1] & (* src = "custom_cpu_riscv32.v:289.13-289.31" *) _128_;
  assign _083_ = { _082_, _082_, _082_, _082_, _082_, _082_, _082_, _082_ } & (* src = "custom_cpu_riscv32.v:289.9-289.51" *) RF_rdata2[15:8];
  assign _084_ = _129_ & (* src = "custom_cpu_riscv32.v:290.12-290.31" *) _128_;
  assign _085_ = { _084_, _084_, _084_, _084_, _084_, _084_, _084_, _084_ } & (* src = "custom_cpu_riscv32.v:290.9-290.52" *) RF_rdata2[31:24];
  assign _086_ = { _082_, _082_, _082_, _082_, _082_, _082_, _082_, _082_ } & (* src = "custom_cpu_riscv32.v:291.29-291.70" *) RF_rdata2[7:0];
  assign _087_ = { _084_, _084_, _084_, _084_, _084_, _084_, _084_, _084_ } & (* src = "custom_cpu_riscv32.v:292.9-292.52" *) RF_rdata2[23:16];
  assign _088_ = _129_ & (* src = "custom_cpu_riscv32.v:293.32-293.51" *) ALUdest[0];
  assign _089_ = { _088_, _088_, _088_, _088_, _088_, _088_, _088_, _088_ } & (* src = "custom_cpu_riscv32.v:293.29-293.70" *) RF_rdata2[7:0];
  assign _090_ = { _084_, _084_, _084_, _084_, _084_, _084_, _084_, _084_ } & (* src = "custom_cpu_riscv32.v:294.9-294.51" *) RF_rdata2[15:8];
  assign Mem_Write_Byte_0 = { _084_, _084_, _084_, _084_, _084_, _084_, _084_, _084_ } & (* src = "custom_cpu_riscv32.v:295.29-295.70" *) RF_rdata2[7:0];
  assign _091_ = IR[12] & (* src = "custom_cpu_riscv32.v:297.34-297.52" *) ALUdest[1];
  assign _092_ = IR[12] & (* src = "custom_cpu_riscv32.v:299.21-299.39" *) _129_;
  assign _093_ = B_type & (* src = "custom_cpu_riscv32.v:373.7-373.22" *) Branch;
  assign _094_ = _101_ & (* src = "custom_cpu_riscv32.v:394.11-394.43" *) Inst_Valid;
  assign _095_ = _102_ & (* src = "custom_cpu_riscv32.v:402.11-402.49" *) Read_data_Valid;
  assign _096_ = | { _100_, RF_wen };
  assign RF_wen = current_state == (* src = "custom_cpu_riscv32.v:259.21-259.40" *) 9'h100;
  assign _097_ = IR[14:12] == (* src = "custom_cpu_riscv32.v:271.16-271.30" *) 2'h2;
  assign _098_ = IR[14:12] == (* src = "custom_cpu_riscv32.v:272.17-272.31" *) 3'h4;
  assign _099_ = IR[14:12] == (* src = "custom_cpu_riscv32.v:272.34-272.48" *) 2'h3;
  assign MemRead = current_state == (* src = "custom_cpu_riscv32.v:284.20-284.39" *) 7'h40;
  assign MemWrite = current_state == (* src = "custom_cpu_riscv32.v:287.23-287.42" *) 6'h20;
  assign Inst_Req_Valid = current_state == (* src = "custom_cpu_riscv32.v:303.28-303.47" *) 2'h2;
  assign _100_ = current_state == (* src = "custom_cpu_riscv32.v:304.28-304.48" *) 1'h1;
  assign _101_ = current_state == (* src = "custom_cpu_riscv32.v:304.51-304.70" *) 3'h4;
  assign _102_ = current_state == (* src = "custom_cpu_riscv32.v:305.51-305.71" *) 8'h80;
  assign _103_ = current_state == (* src = "custom_cpu_riscv32.v:372.11-372.30" *) 5'h10;
  assign _104_ = current_state == (* src = "custom_cpu_riscv32.v:386.11-386.30" *) 4'h8;
  assign _105_ = ! (* src = "custom_cpu_riscv32.v:403.7-403.19" *) ALUdest[1:0];
  assign _106_ = ALUdest[1:0] == (* src = "custom_cpu_riscv32.v:405.12-405.24" *) 1'h1;
  assign _107_ = ALUdest[1:0] == (* src = "custom_cpu_riscv32.v:407.12-407.25" *) 2'h2;
  assign _108_ = ALUdest[1:0] == (* src = "custom_cpu_riscv32.v:409.12-409.25" *) 2'h3;
  assign _109_ = ! (* src = "custom_cpu_riscv32.v:219.35-219.48" *) _173_;
  assign I_type_Ld = ! (* src = "custom_cpu_riscv32.v:221.20-221.33" *) _176_;
  assign _110_ = ! (* src = "custom_cpu_riscv32.v:222.35-222.48" *) _177_;
  assign _111_ = ! (* src = "custom_cpu_riscv32.v:224.48-224.61" *) _175_;
  assign _112_ = ~ (* src = "custom_cpu_riscv32.v:217.21-217.31" *) IR[6];
  assign _113_ = ~ (* src = "custom_cpu_riscv32.v:217.48-217.58" *) IR[3];
  assign _114_ = ~ (* src = "custom_cpu_riscv32.v:218.51-218.61" *) IR[4];
  assign _115_ = ~ (* src = "custom_cpu_riscv32.v:220.20-220.50" *) _130_;
  assign _116_ = ~ (* src = "custom_cpu_riscv32.v:226.31-226.39" *) IR[14];
  assign _117_ = ~ (* src = "custom_cpu_riscv32.v:243.30-243.38" *) IR[13];
  assign _118_ = ~ (* src = "custom_cpu_riscv32.v:243.41-243.49" *) IR[12];
  assign _119_ = ~ (* src = "custom_cpu_riscv32.v:247.40-247.58" *) mtr_write_strb[3];
  assign _120_ = ~ (* src = "custom_cpu_riscv32.v:249.40-249.58" *) mtr_write_strb[2];
  assign _121_ = ~ (* src = "custom_cpu_riscv32.v:251.40-251.58" *) mtr_write_strb[1];
  assign _122_ = ~ (* src = "custom_cpu_riscv32.v:262.33-262.43" *) IR[5];
  assign _123_ = ~ (* src = "custom_cpu_riscv32.v:263.11-263.18" *) U_type;
  assign _124_ = ~ (* src = "custom_cpu_riscv32.v:263.21-263.28" *) J_type;
  assign _125_ = ~ (* src = "custom_cpu_riscv32.v:269.51-269.56" *) IR[14:12];
  assign _126_ = ~ (* src = "custom_cpu_riscv32.v:276.8-276.14" *) Al_lo;
  assign _127_ = ~ (* src = "custom_cpu_riscv32.v:276.17-276.24" *) B_type;
  assign _128_ = ~ (* src = "custom_cpu_riscv32.v:289.23-289.31" *) ALUdest[0];
  assign _129_ = ~ (* src = "custom_cpu_riscv32.v:290.12-290.20" *) ALUdest[1];
  assign _130_ = _174_ | (* src = "custom_cpu_riscv32.v:220.22-220.49" *) _175_;
  assign _131_ = _022_ | (* src = "custom_cpu_riscv32.v:226.31-226.72" *) _023_;
  assign Al_lo = I_type_Al | (* src = "custom_cpu_riscv32.v:227.20-227.38" *) R_type;
  assign _132_ = _025_ | (* src = "custom_cpu_riscv32.v:243.27-244.78" *) _027_;
  assign mtr_write_strb = _132_ | (* src = "custom_cpu_riscv32.v:243.27-245.78" *) _029_;
  assign Reg_Write_Byte_3 = _030_ | (* src = "custom_cpu_riscv32.v:246.29-247.123" *) _034_;
  assign _133_ = { _032_, _032_, _032_, _032_, _032_, _032_, _032_, _032_ } | (* src = "custom_cpu_riscv32.v:247.75-247.122" *) { _033_, _033_, _033_, _033_, _033_, _033_, _033_, _033_ };
  assign Reg_Write_Byte_2 = _035_ | (* src = "custom_cpu_riscv32.v:248.29-249.123" *) _037_;
  assign Reg_Write_Byte_1 = _038_ | (* src = "custom_cpu_riscv32.v:250.29-251.80" *) { _040_, _040_, _040_, _040_, _040_, _040_, _040_, _040_ };
  assign _134_ = _041_ | (* src = "custom_cpu_riscv32.v:254.21-255.42" *) _042_;
  assign _135_ = _134_ | (* src = "custom_cpu_riscv32.v:254.21-256.50" *) _045_;
  assign RF_wdata = _135_ | (* src = "custom_cpu_riscv32.v:254.21-257.61" *) _047_;
  assign _136_ = J_type | (* src = "custom_cpu_riscv32.v:255.12-255.30" *) I_type_Jp;
  assign _137_ = IR[13] | (* src = "custom_cpu_riscv32.v:257.21-257.39" *) _118_;
  assign _138_ = _046_ | (* src = "custom_cpu_riscv32.v:257.12-257.49" *) U_type;
  assign _139_ = _048_ | (* src = "custom_cpu_riscv32.v:262.24-262.52" *) J_type;
  assign ALUsrc1 = _049_ | (* src = "custom_cpu_riscv32.v:262.20-263.42" *) _051_;
  assign _140_ = _052_ | (* src = "custom_cpu_riscv32.v:264.20-265.33" *) _053_;
  assign _141_ = _140_ | (* src = "custom_cpu_riscv32.v:264.20-266.60" *) _054_;
  assign _142_ = _141_ | (* src = "custom_cpu_riscv32.v:264.20-267.33" *) _055_;
  assign ALUsrc2 = _142_ | (* src = "custom_cpu_riscv32.v:264.20-268.40" *) _056_;
  assign _143_ = I_type_Al | (* src = "custom_cpu_riscv32.v:266.11-266.32" *) I_type_Jp;
  assign _144_ = _143_ | (* src = "custom_cpu_riscv32.v:266.11-266.44" *) I_type_Ld;
  assign _145_ = B_type | (* src = "custom_cpu_riscv32.v:268.11-268.26" *) R_type;
  assign _146_ = _151_ | (* src = "custom_cpu_riscv32.v:269.18-271.41" *) _064_;
  assign _147_ = _146_ | (* src = "custom_cpu_riscv32.v:269.18-272.58" *) _067_;
  assign _148_ = _147_ | (* src = "custom_cpu_riscv32.v:269.18-273.47" *) _070_;
  assign _149_ = _148_ | (* src = "custom_cpu_riscv32.v:269.18-274.46" *) _073_;
  assign _150_ = _149_ | (* src = "custom_cpu_riscv32.v:269.18-275.45" *) _075_;
  assign ALUop = _150_ | (* src = "custom_cpu_riscv32.v:269.18-276.35" *) _077_;
  assign _151_ = _059_ | (* src = "custom_cpu_riscv32.v:269.18-270.70" *) _063_;
  assign _152_ = _098_ | (* src = "custom_cpu_riscv32.v:272.17-272.48" *) _099_;
  assign SHTsrc1 = _078_ | (* src = "custom_cpu_riscv32.v:279.20-279.76" *) _079_;
  assign _153_ = _081_ | (* src = "custom_cpu_riscv32.v:288.29-289.51" *) _083_;
  assign Mem_Write_Byte_3 = _153_ | (* src = "custom_cpu_riscv32.v:288.29-290.52" *) _085_;
  assign Mem_Write_Byte_2 = _086_ | (* src = "custom_cpu_riscv32.v:291.29-292.52" *) _087_;
  assign Mem_Write_Byte_1 = _089_ | (* src = "custom_cpu_riscv32.v:293.29-294.51" *) _090_;
  assign _154_ = IR[13] | (* src = "custom_cpu_riscv32.v:297.24-297.52" *) _091_;
  assign Write_strb[3] = _154_ | (* src = "custom_cpu_riscv32.v:297.24-297.74" *) _080_;
  assign Write_strb[2] = _154_ | (* src = "custom_cpu_riscv32.v:298.11-298.61" *) _082_;
  assign _155_ = IR[13] | (* src = "custom_cpu_riscv32.v:299.11-299.39" *) _092_;
  assign Write_strb[1] = _155_ | (* src = "custom_cpu_riscv32.v:299.11-299.61" *) _088_;
  assign Write_strb[0] = _155_ | (* src = "custom_cpu_riscv32.v:300.11-300.61" *) _084_;
  assign Inst_Ready = _100_ | (* src = "custom_cpu_riscv32.v:304.28-304.70" *) _101_;
  assign Read_data_Ready = _100_ | (* src = "custom_cpu_riscv32.v:305.28-305.71" *) _102_;
  assign _156_ = R_type | (* src = "custom_cpu_riscv32.v:337.13-337.28" *) U_type;
  assign _157_ = _156_ | (* src = "custom_cpu_riscv32.v:337.13-337.37" *) J_type;
  assign _158_ = _157_ | (* src = "custom_cpu_riscv32.v:337.13-337.49" *) I_type_Al;
  assign _159_ = _158_ | (* src = "custom_cpu_riscv32.v:337.13-337.61" *) I_type_Jp;
  (* src = "custom_cpu_riscv32.v:399.2-412.5" *)
  always @(posedge clk)
    MDR <= _001_;
  (* src = "custom_cpu_riscv32.v:391.2-396.5" *)
  always @(posedge clk)
    IR <= _000_;
  (* src = "custom_cpu_riscv32.v:383.2-388.5" *)
  always @(posedge clk)
    PC_next <= _003_;
  (* src = "custom_cpu_riscv32.v:369.2-380.5" *)
  always @(posedge clk)
    PC <= _002_;
  (* src = "custom_cpu_riscv32.v:310.2-315.5" *)
  always @(posedge clk)
    current_state <= _004_;
  assign _160_ = _108_ ? (* src = "custom_cpu_riscv32.v:409.12-409.25|custom_cpu_riscv32.v:409.9-410.52" *) { Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31:24] } : MDR;
  assign _161_ = _107_ ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:407.12-407.25|custom_cpu_riscv32.v:407.9-410.52" *) { Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31:16] } : _160_;
  assign _162_ = _106_ ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:405.12-405.24|custom_cpu_riscv32.v:405.9-410.52" *) { Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31], Read_data[31:8] } : _161_;
  assign _163_ = _105_ ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:403.7-403.19|custom_cpu_riscv32.v:403.4-410.52" *) Read_data : _162_;
  assign _164_ = _095_ ? (* src = "custom_cpu_riscv32.v:402.11-402.49|custom_cpu_riscv32.v:402.8-411.6" *) _163_ : MDR;
  assign _001_ = rst ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:400.6-400.9|custom_cpu_riscv32.v:400.3-411.6" *) 32'd0 : _164_;
  assign _165_ = _094_ ? (* src = "custom_cpu_riscv32.v:394.11-394.43|custom_cpu_riscv32.v:394.8-395.22" *) Instruction : IR;
  assign _000_ = rst ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:392.6-392.9|custom_cpu_riscv32.v:392.3-395.22" *) 32'd0 : _165_;
  assign _166_ = _104_ ? (* src = "custom_cpu_riscv32.v:386.11-386.30|custom_cpu_riscv32.v:386.8-387.22" *) _015_ : PC_next;
  assign _003_ = rst ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:384.6-384.9|custom_cpu_riscv32.v:384.3-387.22" *) 32'd0 : _166_;
  assign _167_ = _136_ ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:375.12-375.30|custom_cpu_riscv32.v:375.9-378.19" *) ALUdest : PC_next;
  assign _168_ = _093_ ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:373.7-373.22|custom_cpu_riscv32.v:373.4-378.19" *) _014_ : _167_;
  assign _169_ = _103_ ? (* src = "custom_cpu_riscv32.v:372.11-372.30|custom_cpu_riscv32.v:372.8-379.6" *) _168_ : PC;
  assign _002_ = rst ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:370.6-370.9|custom_cpu_riscv32.v:370.3-379.6" *) 32'd0 : _169_;
  assign _005_ = Read_data_Valid ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:356.36-356.51|custom_cpu_riscv32.v:356.33-359.58" *) 9'h100 : 9'h080;
  assign _013_ = Mem_Req_Ready ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:351.36-351.49|custom_cpu_riscv32.v:351.33-354.57" *) 8'h80 : 8'h40;
  assign _012_ = Mem_Req_Ready ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:346.36-346.49|custom_cpu_riscv32.v:346.33-349.57" *) 6'h02 : 6'h20;
  assign _011_ = _176_ ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:341.41-341.50|custom_cpu_riscv32.v:341.38-344.22" *) 7'h10 : 7'h40;
  assign _010_ = S_type ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:339.13-339.19|custom_cpu_riscv32.v:339.10-344.22" *) 7'h20 : _011_;
  assign _009_ = _159_ ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:337.13-337.61|custom_cpu_riscv32.v:337.10-344.22" *) 9'h100 : { 2'h0, _010_ };
  assign _008_ = B_type ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:335.36-335.42|custom_cpu_riscv32.v:335.33-344.22" *) 9'h002 : _009_;
  assign _007_ = Inst_Valid ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:328.36-328.46|custom_cpu_riscv32.v:328.33-331.57" *) 4'h8 : 4'h4;
  assign _006_ = Inst_Req_Ready ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:323.36-323.50|custom_cpu_riscv32.v:323.33-326.57" *) 3'h4 : 3'h2;
  function [8:0] _384_;
    input [8:0] a;
    input [71:0] b;
    input [7:0] s;
    (* full_case = 32'd1 *)
    (* src = "custom_cpu_riscv32.v:0.0-0.0|custom_cpu_riscv32.v:319.3-364.24" *)
    (* parallel_case *)
    casez (s)
      8'b???????1:
        _384_ = b[8:0];
      8'b??????1?:
        _384_ = b[17:9];
      8'b?????1??:
        _384_ = b[26:18];
      8'b????1???:
        _384_ = b[35:27];
      8'b???1????:
        _384_ = b[44:36];
      8'b??1?????:
        _384_ = b[53:45];
      8'b?1??????:
        _384_ = b[62:54];
      8'b1???????:
        _384_ = b[71:63];
      default:
        _384_ = a;
    endcase
  endfunction
  assign next_state = _384_(9'h001, { 6'h00, _006_, 5'h00, _007_, 9'h010, _008_, 3'h0, _012_, 1'h0, _013_, _005_, 9'h002 }, { Inst_Req_Valid, _101_, _104_, _103_, MemWrite, MemRead, _102_, _096_ });
  assign _004_ = rst ? (* full_case = 32'd1 *) (* src = "custom_cpu_riscv32.v:311.6-311.9|custom_cpu_riscv32.v:311.3-314.32" *) 9'h001 : next_state;
  assign _170_ = & (* src = "custom_cpu_riscv32.v:218.21-218.33" *) IR[6:5];
  assign _171_ = & (* src = "custom_cpu_riscv32.v:218.36-218.48" *) IR[3:2];
  assign _172_ = & (* src = "custom_cpu_riscv32.v:224.33-224.45" *) IR[5:4];
  assign _173_ = | (* src = "custom_cpu_riscv32.v:219.35-219.48" *) IR[4:3];
  assign _174_ = | (* src = "custom_cpu_riscv32.v:220.22-220.34" *) IR[6:5];
  assign _175_ = | (* src = "custom_cpu_riscv32.v:220.37-220.49" *) IR[3:2];
  assign _176_ = | (* src = "custom_cpu_riscv32.v:221.20-221.33" *) IR[6:2];
  assign _177_ = | (* src = "custom_cpu_riscv32.v:222.35-222.48" *) IR[4:2];
  assign Branch = IR[12] ^ (* src = "custom_cpu_riscv32.v:226.20-226.73" *) _131_;
  (* module_not_derived = 32'd1 *)
  (* src = "custom_cpu_riscv32.v:417.13-425.3" *)
  alu_golden u_alu_golden (
    .A(ALUsrc1),
    .ALUop(ALUop),
    .B(ALUsrc2),
    .CarryOut(ALUcarryout),
    .Overflow(ALUoverflow),
    .Result(ALUdest),
    .Zero(ALUzero)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "custom_cpu_riscv32.v:436.18-446.3" *)
  reg_file_golden u_reg_file_golden (
    .clk(clk),
    .raddr1(IR[19:15]),
    .raddr2(IR[24:20]),
    .rdata1(RF_rdata1),
    .rdata2(RF_rdata2),
    .waddr(IR[11:7]),
    .wdata(RF_wdata),
    .wen(RF_wen)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "custom_cpu_riscv32.v:428.17-433.3" *)
  shifter_golden u_shifter_golden (
    .A(SHTsrc1),
    .B(RF_rdata1),
    .Result(SHTdest),
    .Shiftop({ IR[14], IR[30] })
  );
  assign Address = { ALUdest[31:2], 2'h0 };
  assign B_immediate = { IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[7], IR[30:25], IR[11:8], 1'h0 };
  assign I_immediate = { IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31:20] };
  assign J_immediate = { IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[19:12], IR[20], IR[30:21], 1'h0 };
  assign RF_waddr = IR[11:7];
  assign Reg_Write_Byte_0 = MDR[7:0];
  assign SHTop = { IR[14], IR[30] };
  assign SHTsrc2 = RF_rdata1;
  assign S_immediate = { IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31], IR[31:25], IR[11:7] };
  assign U_immediate = { IR[31:12], 12'h000 };
  assign Write_data = { Mem_Write_Byte_3, Mem_Write_Byte_2, Mem_Write_Byte_1, Mem_Write_Byte_0 };
  assign func = IR[14:12];
  assign mask = ALUdest[1:0];
  assign opcode = { IR[30], IR[6:0] };
  assign rd = IR[11:7];
  assign rs1 = IR[19:15];
  assign rs2 = IR[24:20];
  reg [31:0] commit_pc;
  always @(posedge clk)
    if (Inst_Req_Valid && Inst_Req_Ready)
      commit_pc <= PC;
  assign inst_retire = {RF_wen, RF_waddr, RF_wdata, commit_pc};
endmodule

(* src = "reg_file_golden.v:6.1-23.10" *)
module reg_file_golden(clk, waddr, raddr1, raddr2, wen, wdata, rdata1, rdata2);
  (* src = "reg_file_golden.v:19.3-19.54" *)
  wire [4:0] _00_;
  (* src = "reg_file_golden.v:19.3-19.54" *)
  wire [31:0] _01_;
  (* src = "reg_file_golden.v:19.3-19.54" *)
  wire [31:0] _02_;
  (* src = "reg_file_golden.v:20.28-20.31" *)
  wire [31:0] _03_;
  (* src = "reg_file_golden.v:21.28-21.31" *)
  wire [31:0] _04_;
  (* src = "reg_file_golden.v:20.19-20.43" *)
  wire _05_;
  (* src = "reg_file_golden.v:21.19-21.43" *)
  wire _06_;
  (* src = "reg_file_golden.v:7.30-7.33" *)
  input clk;
  wire clk;
  (* src = "reg_file_golden.v:9.20-9.26" *)
  input [4:0] raddr1;
  wire [4:0] raddr1;
  (* src = "reg_file_golden.v:10.20-10.26" *)
  input [4:0] raddr2;
  wire [4:0] raddr2;
  (* src = "reg_file_golden.v:13.21-13.27" *)
  output [31:0] rdata1;
  wire [31:0] rdata1;
  (* src = "reg_file_golden.v:14.21-14.27" *)
  output [31:0] rdata2;
  wire [31:0] rdata2;
  (* src = "reg_file_golden.v:8.20-8.25" *)
  input [4:0] waddr;
  wire [4:0] waddr;
  (* src = "reg_file_golden.v:12.21-12.26" *)
  input [31:0] wdata;
  wire [31:0] wdata;
  (* src = "reg_file_golden.v:11.30-11.33" *)
  input wen;
  wire wen;
  (* src = "reg_file_golden.v:18.14-18.17" *)
  reg [31:0] ram [31:0];
  always @(posedge clk) begin
    if (_02_[31])
      ram[_00_] <= _01_;
  end
  assign _04_ = ram[raddr2];
  assign _03_ = ram[raddr1];
  assign _02_[31] = wen ? (* full_case = 32'd1 *) (* src = "reg_file_golden.v:19.29-19.32|reg_file_golden.v:19.25-19.54" *) 1'h1 : 1'h0;
  assign _01_ = wen ? (* full_case = 32'd1 *) (* src = "reg_file_golden.v:19.29-19.32|reg_file_golden.v:19.25-19.54" *) wdata : 32'hxxxxxxxx;
  assign _00_ = wen ? (* full_case = 32'd1 *) (* src = "reg_file_golden.v:19.29-19.32|reg_file_golden.v:19.25-19.54" *) waddr : 5'hxx;
  assign _05_ = | (* src = "reg_file_golden.v:20.19-20.43" *) raddr1;
  assign _06_ = | (* src = "reg_file_golden.v:21.19-21.43" *) raddr2;
  assign rdata1 = _05_ ? (* src = "reg_file_golden.v:20.19-20.43" *) _03_ : 32'd0;
  assign rdata2 = _06_ ? (* src = "reg_file_golden.v:21.19-21.43" *) _04_ : 32'd0;
  assign _02_[30:0] = { _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31], _02_[31] };
endmodule

(* src = "custom_cpu_riscv32.v:89.1-111.10" *)
module shifter_golden(A, B, Shiftop, Result);
  (* src = "custom_cpu_riscv32.v:108.18-108.58" *)
  wire [31:0] _00_;
  (* src = "custom_cpu_riscv32.v:109.30-109.54" *)
  wire _01_;
  (* src = "custom_cpu_riscv32.v:109.25-109.65" *)
  wire [31:0] _02_;
  (* src = "custom_cpu_riscv32.v:110.30-110.54" *)
  wire _03_;
  (* src = "custom_cpu_riscv32.v:110.25-110.65" *)
  wire [31:0] _04_;
  (* src = "custom_cpu_riscv32.v:108.22-108.33" *)
  wire _05_;
  (* src = "custom_cpu_riscv32.v:110.43-110.54" *)
  wire _06_;
  (* src = "custom_cpu_riscv32.v:108.18-109.65" *)
  wire [31:0] _07_;
  (* src = "custom_cpu_riscv32.v:90.19-90.20" *)
  input [31:0] A;
  (* src = "custom_cpu_riscv32.v:91.19-91.20" *)
  input [31:0] B;
  (* src = "custom_cpu_riscv32.v:93.20-93.26" *)
  output [31:0] Result;
  (* src = "custom_cpu_riscv32.v:92.14-92.21" *)
  input [1:0] Shiftop;
  (* src = "custom_cpu_riscv32.v:101.14-101.20" *)
  wire [31:0] sllres;
  (* src = "custom_cpu_riscv32.v:102.14-102.20" *)
  wire [31:0] srares;
  (* src = "custom_cpu_riscv32.v:103.14-103.20" *)
  wire [31:0] srlres;
  assign _00_ = { _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_, _05_ } & (* src = "custom_cpu_riscv32.v:108.18-108.58" *) sllres;
  assign _01_ = Shiftop[1] & (* src = "custom_cpu_riscv32.v:109.30-109.54" *) Shiftop[0];
  assign _02_ = { _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_ } & (* src = "custom_cpu_riscv32.v:109.25-109.65" *) srares;
  assign _03_ = Shiftop[1] & (* src = "custom_cpu_riscv32.v:110.30-110.54" *) _06_;
  assign _04_ = { _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_, _03_ } & (* src = "custom_cpu_riscv32.v:110.25-110.65" *) srlres;
  assign _05_ = ~ (* src = "custom_cpu_riscv32.v:108.22-108.33" *) Shiftop[1];
  assign _06_ = ~ (* src = "custom_cpu_riscv32.v:110.43-110.54" *) Shiftop[0];
  assign _07_ = _00_ | (* src = "custom_cpu_riscv32.v:108.18-109.65" *) _02_;
  assign Result = _07_ | (* src = "custom_cpu_riscv32.v:108.18-110.65" *) _04_;
  assign sllres = B << (* src = "custom_cpu_riscv32.v:105.18-105.29" *) A[4:0];
  assign srlres = B >> (* src = "custom_cpu_riscv32.v:107.18-107.29" *) A[4:0];
  assign srares = $signed(B) >>> (* src = "custom_cpu_riscv32.v:106.18-106.41" *) A[4:0];
endmodule
