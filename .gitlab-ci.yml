include:
  - local: 'lab_env.yml'
  - local: 'emu_settings.yml'

stages:
  - src_chk
  - bhv_sim
  - run_syn
  - bit_gen
  - reuse
  - fpga_run
  - wav_gen

variables:
    GIT_DEPTH: "1"
    GIT_STRATEGY: clone

workflow:
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /^(docs|Docs|DOCS)/'
      when: never
    - when: always

default:
  image: gitlab.agileserve.org.cn:15050/zelin/vivado-ci-tools/ucas-cod-2022:v0.6
  #image: harbor.agileserve.org.cn:1121/gitlab-ci/ucas-cod-2022:v0.6
  tags:
    - ucas_cod
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure

#=============================================================
rtl_chk:
  stage: src_chk
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf FPGA_ACT=rtl_chk FPGA_VAL="role $TARGET_DESIGN" vivado_prj
  rules:
    - if: '$TARGET_DESIGN =~ /^(example|alu|reg_file|simple_cpu)$/'

custom_cpu_chk:
  stage: src_chk
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf FPGA_ACT=rtl_chk FPGA_VAL="role custom_cpu_$CPU_ISA" vivado_prj
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu"'

software:
  stage: src_chk
  allow_failure: true
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf OS=phy_os ARCH=$CPU_ISA workload
    - echo $CI_COMMIT_SHA > sw_version
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu"'
    - if: '$CI_COMMIT_MESSAGE =~ /emu-reuse-sw/'
      when: never
    - if: '$TARGET_DESIGN == "custom_cpu_emu"'
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - software/workload/ucas-cod/benchmark/simple_test/
      - software/workload/ucas-cod/benchmark/perf_test/
      - sw_version

emu_transform:
  image: gitlab.agileserve.org.cn:15050/ucas-cod-2021-dev/cod-lab:recheck-1.5
  stage: src_chk
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf emu_transform
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /emu-reuse-hw/'
      when: never
    - if: $TARGET_DESIGN == "custom_cpu_emu"
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/emu_out/

#=============================================================
#example/alu/reg_file
bhv_sim:
  stage: bhv_sim
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf SIM_TARGET=$TARGET_DESIGN bhv_sim
  rules:
    - if: '$TARGET_DESIGN =~ /^(example|alu|reg_file)$/'
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    when: always
    paths:
      - fpga/sim_out/$TARGET_DESIGN/*.vcd

#simple_cpu
sim:
  stage: bhv_sim
  allow_failure: true
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf SIM_TARGET=simple_cpu SIM_DUT=$CPU_ISA:$SIM_DUT_TYPE WORKLOAD=simple_test:$SIM_SET:$BENCH bhv_sim
  parallel:
    matrix:
      - SIM_SET: basic
        BENCH: [memcpy]
      - SIM_SET: medium
        BENCH: [sum,mov-c,fib,add,if-else,pascal,quick-sort,select-sort,max,min3,switch,bubble-sort]
      - SIM_SET: advanced
        BENCH: [shuixianhua,sub-longlong,bit,recursion,fact,add-longlong,shift,wanshu,goldbach,leap-year,prime,mul-longlong,load-store,to-lower-case,movsx,matrix-mul,unalign]
  rules:
    - if: '$TARGET_DESIGN == "simple_cpu"'
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    when: on_failure
    paths:
      - fpga/sim_out/$TARGET_DESIGN/*.fst

custom_sim:
  stage: bhv_sim
  allow_failure: true
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf SIM_TARGET=custom_cpu SIM_DUT=$CPU_ISA:$SIM_DUT_TYPE WORKLOAD=simple_test:$SIM_SET:$BENCH bhv_sim
  parallel:
    matrix:
      - SIM_SET: basic
        BENCH: [memcpy]
      - SIM_SET: medium
        BENCH: [sum,mov-c,fib,add,if-else,pascal,quick-sort,select-sort,max,min3,switch,bubble-sort]
      - SIM_SET: advanced
        BENCH: [shuixianhua,sub-longlong,bit,recursion,fact,add-longlong,shift,wanshu,goldbach,leap-year,prime,mul-longlong,load-store,to-lower-case,movsx,matrix-mul,unalign]
      - SIM_SET: hello
        BENCH: [hello]
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu" && $SIM_DUT_TYPE == "multi_cycle"'
  timeout: 3 hours
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    when: on_failure
    paths:
      - fpga/sim_out/$TARGET_DESIGN/*.fst

turbo_sim:
  stage: bhv_sim
  allow_failure: true
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf SIM_TARGET=custom_cpu SIM_DUT=$CPU_ISA:$SIM_DUT_TYPE WORKLOAD=simple_test:$SIM_SET:$BENCH bhv_sim
  parallel:
    matrix:
      - SIM_SET: basic
        BENCH: [memcpy]
      - SIM_SET: medium
        BENCH: [sum,mov-c,fib,add,if-else,pascal,quick-sort,select-sort,max,min3,switch,bubble-sort]
      - SIM_SET: advanced
        BENCH: [shuixianhua,sub-longlong,bit,recursion,fact,add-longlong,shift,wanshu,goldbach,leap-year,prime,mul-longlong,load-store,to-lower-case,movsx,matrix-mul,unalign]
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu" && $SIM_DUT_TYPE == "turbo"'
  timeout: 3 hours
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    when: on_failure
    paths:
      - fpga/sim_out/$TARGET_DESIGN/*.fst

#=============================================================
run_syn:
  stage: run_syn
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf FPGA_ACT=prj_gen FPGA_VAL="role $TARGET_DESIGN" vivado_prj
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf FPGA_ACT=run_syn FPGA_VAL="role $TARGET_DESIGN" vivado_prj
  rules:
    - if: '$TARGET_DESIGN =~ /^(example|alu|reg_file|simple_cpu)$/'
  dependencies:
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/vivado_out/**/synth.dcp
      - fpga/vivado_out/**/*.rpt

custom_run_syn:
  stage: run_syn
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf FPGA_ACT=prj_gen FPGA_VAL="role custom_cpu_$CPU_ISA" vivado_prj
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf FPGA_ACT=run_syn FPGA_VAL="role custom_cpu_$CPU_ISA" vivado_prj
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu"'
  dependencies:
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/vivado_out/**/synth.dcp
      - fpga/vivado_out/**/*.rpt

emu_run_syn:
  stage: run_syn
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf FPGA_ACT=prj_gen FPGA_VAL="role emu" vivado_prj
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf FPGA_ACT=run_syn FPGA_VAL="role emu" vivado_prj
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /emu-reuse-hw/'
      when: never
    - if: $TARGET_DESIGN == "custom_cpu_emu"
  dependencies:
    - emu_transform
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/vivado_out/**/synth.dcp
      - fpga/vivado_out/**/*.rpt

#=============================================================
bit_gen:
  stage: bit_gen
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf FPGA_ACT=bit_gen FPGA_VAL="role $TARGET_DESIGN $ROLE" vivado_prj
  parallel:
    matrix:
      - ROLE: [0, 1, 2, 3, 4]
  rules:
    - if: '$TARGET_DESIGN =~ /^(example|alu|reg_file|simple_cpu)$/'
  dependencies:
    - run_syn
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - hw_plat/**/*.bit.bin
      - fpga/vivado_out/**/post_route*.rpt

custom_bit_gen:
  stage: bit_gen
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf FPGA_ACT=bit_gen FPGA_VAL="role custom_cpu_$CPU_ISA $ROLE" vivado_prj
  parallel:
    matrix:
      - ROLE: [0, 1, 2, 3, 4]
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu"'
  dependencies:
    - custom_run_syn
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - hw_plat/**/*.bit.bin
      - fpga/vivado_out/**/post_route*.rpt
      - fpga/vivado_out/**/opt_timing*.rpt

emu_bit_gen:
  stage: bit_gen
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf FPGA_ACT=bit_gen FPGA_VAL="role emu $ROLE" vivado_prj
    - echo $CI_COMMIT_SHA > hw_version
  parallel:
    matrix:
      - ROLE: [0, 1, 2, 3, 4]
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /emu-reuse-hw/'
      when: never
    - if: $TARGET_DESIGN == "custom_cpu_emu"
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - hw_plat/**/*.bit.bin
      - hw_version
  dependencies:
    - emu_run_syn

#=============================================================
reuse_hw:
  image: gitlab.agileserve.org.cn:15050/ucas-cod-2021-dev/cod-lab:reuse-check
  stage: reuse
  script:
    - bash fpga/design/ucas-cod/run/reuse_hw.sh
  rules:
    - if: $TARGET_DESIGN == "custom_cpu_emu"
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - hw_version
      - fpga/emu_out/
      - hw_plat/**/*.bit.bin
  dependencies:
    - emu_transform
    - emu_bit_gen

reuse_sw:
  image: gitlab.agileserve.org.cn:15050/ucas-cod-2021-dev/cod-lab:reuse-check
  stage: reuse
  script:
    - bash fpga/design/ucas-cod/run/reuse_sw.sh
  rules:
    - if: $TARGET_DESIGN == "custom_cpu_emu"
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - sw_version
      - software/workload/ucas-cod/benchmark/
  dependencies:
    - software

#=============================================================
fpga_eval:
  stage: fpga_run
  tags:
    - nfv3_for_cod_v8
  script:
    - bash ./fpga/design/ucas-cod/run/example/fpga_run.sh $TARGET_DESIGN
  rules:
    - if: '$TARGET_DESIGN =~ /^(example|alu|reg_file)$/'
  dependencies:
    - bit_gen

simple_eval:
  stage: fpga_run
  tags:
    - nfv3_for_cod_v8
  script:
    - bash ./fpga/design/ucas-cod/run/simple_cpu/fpga_run.sh $BENCH_SUITE $TARGET_DESIGN $CPU_ISA
  parallel:
    matrix:
      - BENCH_SUITE: [basic, medium, advanced]
  rules:
    - if: '$TARGET_DESIGN == "simple_cpu"'
  dependencies:
    - bit_gen

custom_eval:
  stage: fpga_run
  tags:
    - nfv3_for_cod_v8
  script:
    - bash ./fpga/design/ucas-cod/run/simple_cpu/fpga_run.sh $BENCH_SUITE $TARGET_DESIGN $CPU_ISA
  parallel:
    matrix:
      - BENCH_SUITE: [basic, medium, advanced, hello, microbench]
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu" && ($SIM_DUT_TYPE == "multi_cycle" || $SIM_DUT_TYPE == "turbo")'
  dependencies:
    - custom_bit_gen
    - software

turbo_eval:
  stage: fpga_run
  tags:
    - nfv3_for_cod_v8
  script:
    - bash ./fpga/design/ucas-cod/run/turbo_cpu/fpga_run.sh $BENCH_SUITE $TARGET_DESIGN $CPU_ISA
  parallel:
    matrix:
      - BENCH_SUITE: [coremark, dhrystone]
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu" && $SIM_DUT_TYPE == "turbo"'
  dependencies:
    - custom_bit_gen
    - software

dnn_eval:
  stage: fpga_run
  tags:
    - nfv3_for_cod_v8
  script:
    - bash ./fpga/design/ucas-cod/run/simple_cpu/fpga_run.sh $BENCH_SUITE:$BENCH $TARGET_DESIGN $CPU_ISA
  parallel:
    matrix:
      - BENCH_SUITE: [dnn_test]
        BENCH: [sw_conv,sw_conv_mul,hw_conv]
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu" && $SIM_DUT_TYPE == "dnn_test"'
  dependencies:
    - custom_bit_gen
    - software

dma_eval:
  stage: fpga_run
  tags:
    - nfv3_for_cod_v8
  script:
    - bash ./fpga/design/ucas-cod/run/simple_cpu/fpga_run.sh $BENCH_SUITE:$BENCH $TARGET_DESIGN $CPU_ISA
  parallel:
    matrix:
      - BENCH_SUITE: [dma_test]
        BENCH: [data_mover_no_dma,data_mover_dma]
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu" && $SIM_DUT_TYPE == "dma_test"'
  dependencies:
    - custom_bit_gen
    - software

emu_run:
  stage: fpga_run
  tags:
    - nfv3_for_cod_v8
  script:
    - bash ./fpga/design/ucas-cod/run/emu/fpga_run.sh
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu_emu"'
  dependencies:
    - reuse_hw
    - reuse_sw
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/emu_out/dump/

#=============================================================
wav_gen:
  image: gitlab.agileserve.org.cn:15050/ucas-cod-2021-dev/cod-lab:recheck-1.5
  stage: wav_gen
  script:
    - make FPGA_PRJ=ucas-cod FPGA_BD=nf SIM_TARGET=custom_cpu_emu SIM_DUT=$CPU_ISA:$SIM_DUT_TYPE:$EMU_REPLAY_WINDOW bhv_sim
  rules:
    - if: '$TARGET_DESIGN == "custom_cpu_emu"'
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/sim_out/
  dependencies:
    - reuse_hw
    - reuse_sw
    - emu_run
